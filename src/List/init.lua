
local List = {
	copy			= require(script:WaitForChild("copy")),
	copyDeep		= require(script:WaitForChild("copyDeep")),
	count			= require(script:WaitForChild("count")),
	equals			= require(script:WaitForChild("equals")),
	equalsDeep		= require(script:WaitForChild("equalsDeep")),
	every			= require(script:WaitForChild("every")),
	filter			= require(script:WaitForChild("filter")),
	find			= require(script:WaitForChild("find")),
	findLast		= require(script:WaitForChild("findLast")),
	findWhere		= require(script:WaitForChild("findWhere")),
	findWhereLast	= require(script:WaitForChild("findWhereLast")),
	flatMap			= require(script:WaitForChild("flatMap")),
	flatten			= require(script:WaitForChild("flatten")),
	includes		= require(script:WaitForChild("includes")),
	insert			= require(script:WaitForChild("insert")),
	join			= require(script:WaitForChild("join")),
	joinDeep		= require(script:WaitForChild("joinDeep")),
	map				= require(script:WaitForChild("map")),
	pop				= require(script:WaitForChild("pop")),
	push			= require(script:WaitForChild("push")),
	reduce			= require(script:WaitForChild("reduce")),
	reduceRight		= require(script:WaitForChild("reduceRight")),
	remove			= require(script:WaitForChild("remove")),
	reverse			= require(script:WaitForChild("reverse")),
	set				= require(script:WaitForChild("set")),
	shift			= require(script:WaitForChild("shift")),
	slice			= require(script:WaitForChild("slice")),
	some			= require(script:WaitForChild("some")),
	sort			= require(script:WaitForChild("sort")),
	splice			= require(script:WaitForChild("splice")),
	toSet			= require(script:WaitForChild("toSet")),
	unshift			= require(script:WaitForChild("unshift")),
	update			= require(script:WaitForChild("update")),
	zip				= require(script:WaitForChild("zip")),
	zipAll			= require(script:WaitForChild("zipAll")),
	zipWith			= require(script:WaitForChild("zipWith")),
}

return List